---

- hosts: all
  vars_files:
    - cis_vars.yml

  tasks:
# PRELIM WORKSPACE SETUP (NEEDED FOR CLEANUP)
  - name: check for workspace
    stat:
      path: "{{ WORKSPACE_PATH }}"
    register: sym

  - debug: { msg: "{{ sym }}" }

  - name: create workspace dir if not exist
    file:
      path: "{{ WORKSPACE_PATH }}"
      state: directory
    when: sym.stat.exists == false
    become: yes


# AUDIT
  - name: Check for Enabled Services
    command: "systemctl is-enabled {{item}}"
    with_items: "{{ DEFAULT_ENABLED_SERVICES }}"
    ignore_errors: yes
    register: DEFAULT_ENABLED_SERVICES_STATE

  - name: AUDIT| Single-User mode protected
    command: "grep ^root:[*\\!]: /etc/shadow"
    register: single_mode_check
    become: yes

  - name: SET_FACT| FLAG FOR SINGLE-USER MODE NOT PROTECTED
    set_fact:
      AUDITREPORT_SINGLE_USER: 'FAIL'
    when: single_mode_check is defined and single_mode_check.rc == 0


# CREATE/UPDATE
#   INSTALL PACKAGES FROM CIS_VAR INSTALL LIST
  - name: Install Basic Packages
    action: >
      {{ ansible_pkg_mgr }} name={{ item }} state=present update_cache=yes
    with_items: "{{ INSTALL_DEFAULT_PKGS }}"
    become: yes

#   REMOVE PACKAGES FROM CIS_VAR REMOVE LIST
  - name: Remove Problematic Packages
    action: >
      {{ ansible_pkg_mgr }} name={{ item }} state=absent update_cache=yes
    with_items: "{{ REMOVE_DEFAULT_PKGS }}"
    become: yes
    ignore_errors: yes

  - name: Generate CIS.conf module blacklist
    template:
      backup: yes
      src: templates/cis.j2
      dest: /etc/modprobe.d/cis.conf
    become: yes

  - name: Generate sysctl.conf defaults
    template:
      backup: yes
      src: templates/sysctl.conf.j2
      dest: /etc/sysctl.conf
    become: yes

  - name: Configure sysctl.conf cronjob to address debian bug during reboot
    cron:
      name: "sysctl bug resolution"
      special_time: reboot
      job: "/bin/sleep 5 && /sbin/sysctl --system"
      cron_file: '/etc/crontab'
      user: root
      state: present
      disabled: "{{ DISABLE_SYSCTL_BUGFIX }}"
      backup: yes
    become: yes

  - name: Reload sysctl from config
    command: "sysctl --system"
    become: yes

  - name: Enable default CIS systemd services
    service:
      name: "{{ item }}"
      state: restarted
    with_items: "{{DEFAULT_ENABLED_SERVICES}}"
    become: yes
    ignore_errors: yes

  - name: Disable default CIS systemd services
    service:
      name: "{{ item }}"
      state: stopped
    with_items: "{{DEFAULT_DISABLED_SERVICES}}"
    become: yes
    ignore_errors: yes

  - name: Disable Prelink
    command: "prelink -ua"
    ignore_errors: yes

  - name: Set Sticky bit on world writables
    shell: "df --local -P | grep -v 'snap' | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type d -perm -0002 2>/dev/null | xargs chmod a+t"
    become: yes

  - name: AIDE| first-run initialization
    command: "aideinit"
    when: AIDE_FIRSTRUN == 'yes'

  - name: AIDE| Configure cronjob for daily check
    cron:
      name: "daily AIDE intrusion check"
      minute: "0"
      hour: "5"
      job: "/usr/bin/aide --config /etc/aide/aide.conf --check"
      cron_file: '/etc/crontab'
      user: root
      state: present
      disabled: "{{ DISABLE_CRON_AIDE_CHECK }}"
      backup: yes
    become: yes


# BANNER WARNINGS (LEGAL) (co-depends: banner.j2)
  - name: Set motd (postlogin)
    template:
      src: templates/banner.j2
      dest: "{{ item }}"
      mode: 0644
    with_items:
     - /etc/motd
     - /etc/issue
     - /etc/issue.net
    become: yes

#  - name: Set issue (prelogin) (stubbed)
#  - name: Set issue.net (prelogin remote) (stubbed)

  - name: Chrony| Time Synchronization Configuration
    template:
      src: templates/chrony.conf.j2
      dest: "/etc/chrony/chrony.conf"
      mode: 0644
    become: yes

# Process Hardening (co-depends: task-Generate sysctl.conf defaults )
  - name: Process Hardening (disable core dumps)
    template:
      backup: yes
      src: templates/limits.conf.j2
      dest: "/etc/security/limits.conf"
      mode: 0644
    become: yes

# Update Grub boot parameters
  - name: "/etc/default/grub| Updating File"
    template:
      src: templates/grub.j2
      dest: /etc/default/grub
      mode: 0644
      backup: yes
    become: yes
    register: UPDATE_GRUB

# Call Grub boot parameter update (co-depends: tasks: Update GRUB_CMDLINE_LINUX)
  - name: Call Update-Grub
    command: "update-grub"
    become: yes
    when: not UPDATE_GRUB is skipped or UPDATE_GRUB is not defined


  - name: Ensure permissions for grub are set correctly
    file:
      path: "{{item}}"
      mode: '0400'
      owner: root
      group: root
    with_items:
      - /etc/default/grub
      - /boot/grub/grub.cfg
    become: yes

  - name: Generate list of executable programs for auditd
    shell: "find / -xdev \\( -perm -4000 -o -perm -2000 \\) -type f | awk '{print \"-a always,exit -F path=\" $1 \" -F perm=x -F auid>=1000 -F auid!=4294967295 -k privileges\"}'"
    register: LOG_PROG_EXECUTE
    become: yes

  - name: Generate auditd config
    template:
      src: templates/audit.rules.j2
      dest: "/etc/audit/rules.d/cis.rules"
      mode: '0600'
      backup: yes
    become: yes

  - name: Generate rsyslogd config
    template:
      src: templates/rsyslog.conf.j2
      dest: /etc/rsyslog.conf
      mode: '0644'
      backup: yes
    become: yes


  - name: reload rsyslog rules
    command: "pkill -HUP rsyslogd"
    become: yes

  - name: configure sudoers
    template:
      src: templates/sudoers.j2
      dest: /etc/sudoers
      validate: 'visudo -cf %s'
      mode: 0440
    become: yes


# CLEANUP TEMPLATE BACKUPS

  - name: Find Ansible Backups for Cleanup
    find:
      paths: '/etc'
      patterns: "{{ TEMPLATE_FILES }}"
      recurse: yes
    register: find_results
    tags: test
    become: yes

  - name: Move Template Backups from sensitive folders to
    command: "mv {{item['path'] }} {{ WORKSPACE_PATH }}"
    with_items: "{{ find_results['files'] }}"
    become: yes
    when: find_results['files'] is defined
    tags: test

  - debug: { msg: "{{find_results}}" }
    tags: test
#### TODO ####

# Only for XWindows/Wayland Systems

# # gdm = 644 /etc/dconf/profile/gdm
# user-db:user
# system-db:gdm
# file-db:/usr/share/gdm/greeter-dconf-defaults
#
# # banner-message-enable banner-message-text
# # /etc/dconf/db/gdm.d/*
# # banner-message-enable=true
# # banner-message-text='the message'
# # run 'dconf update'
